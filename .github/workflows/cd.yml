name: CD

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      CDK_DEFAULT_ACCOUNT: ${{ secrets.CDK_DEFAULT_ACCOUNT }}
      CDK_DEFAULT_REGION: ${{ secrets.CDK_DEFAULT_REGION }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
      DATABASE_HOST: ${{ secrets.DATABASE_HOST }}
      POSTGRE_DATABASE_PORT: ${{ secrets.POSTGRE_DATABASE_PORT }}
      POSTGRE_DATABASE_USER_NAME: ${{ secrets.POSTGRE_DATABASE_USER_NAME }}
      POSTGRE_DATABASE_PASSWORD: ${{ secrets.POSTGRE_DATABASE_PASSWORD }}
      POSTGRE_DATABASE_NAME: ${{ secrets.POSTGRE_DATABASE_NAME }}
      BASTION_IP: ${{ secrets.BASTION_IP }}
      BASTION_USER: ${{ secrets.BASTION_USER }}
      BASTION_SSH_KEY: ${{ secrets.BASTION_SSH_KEY }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Use Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 20

      - name: Install dependencies
        run: |
          npm ci
          cd ./aws-cdk/dependencies/layer1 && npm ci

      - name: Build Nest.js app
        run: npm run build

      - name: Migration
        run: |
          mkdir ~/.ssh
          ssh-keyscan -H $BASTION_IP >> ~/.ssh/known_hosts
          eval `ssh-agent -s`
          ssh-add - <<< "$BASTION_SSH_KEY"
          ssh -fN -v -L 5432:$DATABASE_HOST:5432 $BASTION_USER@$BASTION_IP
          npm run db:reset

      - name: Install AWS CLI
        run: |
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install --update

      - name: Configure AWS credentials
        run: |
          aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
          aws configure set aws_secret_access_key $AWS_ACCESS_KEY_ID
          aws configure set region $CDK_DEFAULT_REGION

      #- name: Confirm AWS credentials
      #  run: aws sts get-caller-identity

      - name: Deploy with CDK
        run: |
          npm install -g aws-cdk@2.130.0
          cdk deploy --require-approval never

      - name: Clean up
        run: |
          npm prune --production
